{"ast":null,"code":"import { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { first } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/login.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(loginService, router) {\n    this.loginService = loginService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.buildForm();\n  }\n  buildForm() {\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required])\n    });\n  }\n  login() {\n    const payload = this.loginForm.getRawValue();\n    this.loginService.login(payload).pipe(first()).subscribe({\n      next: res => {},\n      error: err => {},\n      complete: () => {\n        this.router.navigate([\"/task-list\"]);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 14,\n    vars: 2,\n    consts: [[1, \"h-100\", \"d-flex\", \"justify-content-center\", \"align-items-center\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-12\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [\"formControlName\", \"password\"], [1, \"w-100\", \"btn\", \"btn-lg\", \"btn-primary\", 3, \"disabled\", \"click\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\");\n        i0.ɵɵtext(5, \"E-mail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 3)(8, \"label\");\n        i0.ɵɵtext(9, \"Senha\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 3)(12, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_12_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵtext(13, \" Salvar \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormGroup","FormControl","Validators","first","LoginComponent","constructor","loginService","router","ngOnInit","buildForm","loginForm","email","required","password","login","payload","getRawValue","pipe","subscribe","next","res","error","err","complete","navigate","_","i0","ɵɵdirectiveInject","i1","LoginService","i2","Router","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","LoginComponent_Template_button_click_12_listener","ɵɵadvance","ɵɵproperty","invalid"],"sources":["D:\\Rayssa Mendonça\\Estudo\\Programação\\Cursos\\Santander Coders 2023\\Curso Santander Coders\\Framework de Front End II (Angular)\\equipe4-angular-sc23\\src\\app\\core\\auth\\components\\login\\login.component.ts","D:\\Rayssa Mendonça\\Estudo\\Programação\\Cursos\\Santander Coders 2023\\Curso Santander Coders\\Framework de Front End II (Angular)\\equipe4-angular-sc23\\src\\app\\core\\auth\\components\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { LoginService } from \"../../services/login.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { LoginCredentials } from \"../../models/login-credentials.model\";\r\nimport { first } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.css\"],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public loginForm!: FormGroup;\r\n\r\n  constructor(private loginService: LoginService, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.buildForm();\r\n  }\r\n\r\n  public buildForm(): void {\r\n    this.loginForm = new FormGroup({\r\n      email: new FormControl(null, [Validators.required, Validators.email]),\r\n      password: new FormControl(null, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  public login(): void {\r\n    const payload: LoginCredentials = this.loginForm.getRawValue();\r\n    this.loginService\r\n      .login(payload)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (res) => {},\r\n        error: (err) => {},\r\n        complete: () => {\r\n          this.router.navigate([\"/task-list\"]);\r\n        },\r\n      });\r\n  }\r\n}\r\n","<div class=\"h-100 d-flex justify-content-center align-items-center\">\r\n    <form [formGroup]=\"loginForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n\r\n            <label>E-mail</label>\r\n            <input matInput formControlName=\"email\" />\r\n\r\n        </div>\r\n        <div class=\"col-12\">\r\n\r\n            <label>Senha</label>\r\n            <input formControlName=\"password\" />\r\n\r\n        </div>\r\n        <div class=\"col-12\">\r\n          <button\r\n            class=\"w-100 btn btn-lg btn-primary\"\r\n            (click)=\"login()\"\r\n            [disabled]=\"loginForm.invalid\"\r\n          >\r\n            Salvar\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>"],"mappings":"AACA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAInE,SAASC,KAAK,QAAQ,MAAM;;;;;AAO5B,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEzEC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEOA,SAASA,CAAA;IACd,IAAI,CAACC,SAAS,GAAG,IAAIV,SAAS,CAAC;MAC7BW,KAAK,EAAE,IAAIV,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACS,KAAK,CAAC,CAAC;MACrEE,QAAQ,EAAE,IAAIZ,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACU,QAAQ,CAAC;KACtD,CAAC;EACJ;EAEOE,KAAKA,CAAA;IACV,MAAMC,OAAO,GAAqB,IAAI,CAACL,SAAS,CAACM,WAAW,EAAE;IAC9D,IAAI,CAACV,YAAY,CACdQ,KAAK,CAACC,OAAO,CAAC,CACdE,IAAI,CAACd,KAAK,EAAE,CAAC,CACbe,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI,CAAE,CAAC;MACjBC,KAAK,EAAGC,GAAG,IAAI,CAAE,CAAC;MAClBC,QAAQ,EAAEA,CAAA,KAAK;QACb,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACtC;KACD,CAAC;EACN;EAAC,QAAAC,CAAA,G;qBA5BUrB,cAAc,EAAAsB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAd5B,cAAc;IAAA6B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCZ3Bb,EAAA,CAAAe,cAAA,aAAoE;QAKjDf,EAAA,CAAAgB,MAAA,aAAM;QAAAhB,EAAA,CAAAiB,YAAA,EAAQ;QACrBjB,EAAA,CAAAkB,SAAA,eAA0C;QAE9ClB,EAAA,CAAAiB,YAAA,EAAM;QACNjB,EAAA,CAAAe,cAAA,aAAoB;QAETf,EAAA,CAAAgB,MAAA,YAAK;QAAAhB,EAAA,CAAAiB,YAAA,EAAQ;QACpBjB,EAAA,CAAAkB,SAAA,gBAAoC;QAExClB,EAAA,CAAAiB,YAAA,EAAM;QACNjB,EAAA,CAAAe,cAAA,cAAoB;QAGhBf,EAAA,CAAAmB,UAAA,mBAAAC,iDAAA;UAAA,OAASN,GAAA,CAAA1B,KAAA,EAAO;QAAA,EAAC;QAGjBY,EAAA,CAAAgB,MAAA,gBACF;QAAAhB,EAAA,CAAAiB,YAAA,EAAS;;;QArBTjB,EAAA,CAAAqB,SAAA,GAAuB;QAAvBrB,EAAA,CAAAsB,UAAA,cAAAR,GAAA,CAAA9B,SAAA,CAAuB;QAkBrBgB,EAAA,CAAAqB,SAAA,IAA8B;QAA9BrB,EAAA,CAAAsB,UAAA,aAAAR,GAAA,CAAA9B,SAAA,CAAAuC,OAAA,CAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}